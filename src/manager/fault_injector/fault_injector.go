package main

import (
	
	"fmt"
	"flag"
	"os"
	"time"

	"manager/rng"
	"manager/fault_injector/selector"
	"manager/fault_injector/injector"
)

func main() {
	repFile := flag.String("repmap", "replication.map", "Replication Map file")
	networkMapFileName := flag.String("netmap", "network.stat", "Network Map file (Generated by EntangledMPI)")
	killNonRep := flag.Bool("knrep", false, "Kill non replicated node")
	nRank := flag.Int("n", 0, "Nos of ranks to kill")
	
	flag.Parse()

	if *repFile == "" {
		fmt.Println("Enter replication file path")
		os.Exit(3)
	}

	if *networkMapFileName == "" {
		fmt.Println("Enter network map file path")
		os.Exit(3)
	}

	// Get Ranks to kill [array n]
	// Get interval to kill [array n]
	// Start killing

	//grng := rng.NewGaussianGenerator(time.Now().UnixNano(), 5.0, 2.0)
	grng := rng.NewPoissonGenerator(time.Now().UnixNano(), 5)

	opt := &selector.SelectorOpts {
		ImageToKill: selector.KILL_ANY,
	}
	opt.KillEvenIfNotReplicated = *killNonRep
	selec, _ := selector.NewSelector(*repFile, grng, 20 * time.Second, 4 * time.Second, opt)

	a, _ := selec.NextN(*nRank)

	fmt.Println("\nSelected:")
	for i, p := range a {
		fmt.Printf("%d: Wait Interval: %fs Rank: %d\n",i, p.WaitInterval.Seconds(), p.Rank)
	}
	fmt.Println()

	inject, _ := injector.NewInjector(*networkMapFileName)
	inject.Start(a)
}